// Autogenerated by Thrift Compiler (0.9.3)
// DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING

package hydraThrift

import (
	"bytes"
	"fmt"
	"git.apache.org/thrift.git/lib/go/thrift"
)

// (needed to ensure safety because of naive import list construction.)
var _ = thrift.ZERO
var _ = fmt.Printf
var _ = bytes.Equal

var GoUnusedProtection__ int

// Attributes:
//  - ID
//  - Name
//  - SecClearance
//  - Position
type CrewMember struct {
	ID           int32  `thrift:"id,1" json:"id"`
	Name         string `thrift:"name,2" json:"name"`
	SecClearance int32  `thrift:"secClearance,3" json:"secClearance"`
	Position     string `thrift:"position,4" json:"position"`
}

func NewCrewMember() *CrewMember {
	return &CrewMember{}
}

func (p *CrewMember) GetID() int32 {
	return p.ID
}

func (p *CrewMember) GetName() string {
	return p.Name
}

func (p *CrewMember) GetSecClearance() int32 {
	return p.SecClearance
}

func (p *CrewMember) GetPosition() string {
	return p.Position
}
func (p *CrewMember) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		case 4:
			if err := p.readField4(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *CrewMember) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.ID = v
	}
	return nil
}

func (p *CrewMember) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.Name = v
	}
	return nil
}

func (p *CrewMember) readField3(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadI32(); err != nil {
		return thrift.PrependError("error reading field 3: ", err)
	} else {
		p.SecClearance = v
	}
	return nil
}

func (p *CrewMember) readField4(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 4: ", err)
	} else {
		p.Position = v
	}
	return nil
}

func (p *CrewMember) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("CrewMember"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := p.writeField4(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *CrewMember) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("id", thrift.I32, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:id: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.ID)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.id (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:id: ", p), err)
	}
	return err
}

func (p *CrewMember) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("name", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:name: ", p), err)
	}
	if err := oprot.WriteString(string(p.Name)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.name (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:name: ", p), err)
	}
	return err
}

func (p *CrewMember) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("secClearance", thrift.I32, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:secClearance: ", p), err)
	}
	if err := oprot.WriteI32(int32(p.SecClearance)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.secClearance (3) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:secClearance: ", p), err)
	}
	return err
}

func (p *CrewMember) writeField4(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("position", thrift.STRING, 4); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 4:position: ", p), err)
	}
	if err := oprot.WriteString(string(p.Position)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.position (4) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 4:position: ", p), err)
	}
	return err
}

func (p *CrewMember) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("CrewMember(%+v)", *p)
}

// Attributes:
//  - Shipname
//  - CaptainName
//  - Crew
type Ship struct {
	Shipname    string        `thrift:"shipname,1" json:"shipname"`
	CaptainName string        `thrift:"CaptainName,2" json:"CaptainName"`
	Crew        []*CrewMember `thrift:"Crew,3" json:"Crew"`
}

func NewShip() *Ship {
	return &Ship{}
}

func (p *Ship) GetShipname() string {
	return p.Shipname
}

func (p *Ship) GetCaptainName() string {
	return p.CaptainName
}

func (p *Ship) GetCrew() []*CrewMember {
	return p.Crew
}
func (p *Ship) Read(iprot thrift.TProtocol) error {
	if _, err := iprot.ReadStructBegin(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read error: ", p), err)
	}

	for {
		_, fieldTypeId, fieldId, err := iprot.ReadFieldBegin()
		if err != nil {
			return thrift.PrependError(fmt.Sprintf("%T field %d read error: ", p, fieldId), err)
		}
		if fieldTypeId == thrift.STOP {
			break
		}
		switch fieldId {
		case 1:
			if err := p.readField1(iprot); err != nil {
				return err
			}
		case 2:
			if err := p.readField2(iprot); err != nil {
				return err
			}
		case 3:
			if err := p.readField3(iprot); err != nil {
				return err
			}
		default:
			if err := iprot.Skip(fieldTypeId); err != nil {
				return err
			}
		}
		if err := iprot.ReadFieldEnd(); err != nil {
			return err
		}
	}
	if err := iprot.ReadStructEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T read struct end error: ", p), err)
	}
	return nil
}

func (p *Ship) readField1(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 1: ", err)
	} else {
		p.Shipname = v
	}
	return nil
}

func (p *Ship) readField2(iprot thrift.TProtocol) error {
	if v, err := iprot.ReadString(); err != nil {
		return thrift.PrependError("error reading field 2: ", err)
	} else {
		p.CaptainName = v
	}
	return nil
}

func (p *Ship) readField3(iprot thrift.TProtocol) error {
	_, size, err := iprot.ReadListBegin()
	if err != nil {
		return thrift.PrependError("error reading list begin: ", err)
	}
	tSlice := make([]*CrewMember, 0, size)
	p.Crew = tSlice
	for i := 0; i < size; i++ {
		_elem0 := &CrewMember{}
		if err := _elem0.Read(iprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error reading struct: ", _elem0), err)
		}
		p.Crew = append(p.Crew, _elem0)
	}
	if err := iprot.ReadListEnd(); err != nil {
		return thrift.PrependError("error reading list end: ", err)
	}
	return nil
}

func (p *Ship) Write(oprot thrift.TProtocol) error {
	if err := oprot.WriteStructBegin("Ship"); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write struct begin error: ", p), err)
	}
	if err := p.writeField1(oprot); err != nil {
		return err
	}
	if err := p.writeField2(oprot); err != nil {
		return err
	}
	if err := p.writeField3(oprot); err != nil {
		return err
	}
	if err := oprot.WriteFieldStop(); err != nil {
		return thrift.PrependError("write field stop error: ", err)
	}
	if err := oprot.WriteStructEnd(); err != nil {
		return thrift.PrependError("write struct stop error: ", err)
	}
	return nil
}

func (p *Ship) writeField1(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("shipname", thrift.STRING, 1); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 1:shipname: ", p), err)
	}
	if err := oprot.WriteString(string(p.Shipname)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.shipname (1) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 1:shipname: ", p), err)
	}
	return err
}

func (p *Ship) writeField2(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("CaptainName", thrift.STRING, 2); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 2:CaptainName: ", p), err)
	}
	if err := oprot.WriteString(string(p.CaptainName)); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T.CaptainName (2) field write error: ", p), err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 2:CaptainName: ", p), err)
	}
	return err
}

func (p *Ship) writeField3(oprot thrift.TProtocol) (err error) {
	if err := oprot.WriteFieldBegin("Crew", thrift.LIST, 3); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field begin error 3:Crew: ", p), err)
	}
	if err := oprot.WriteListBegin(thrift.STRUCT, len(p.Crew)); err != nil {
		return thrift.PrependError("error writing list begin: ", err)
	}
	for _, v := range p.Crew {
		if err := v.Write(oprot); err != nil {
			return thrift.PrependError(fmt.Sprintf("%T error writing struct: ", v), err)
		}
	}
	if err := oprot.WriteListEnd(); err != nil {
		return thrift.PrependError("error writing list end: ", err)
	}
	if err := oprot.WriteFieldEnd(); err != nil {
		return thrift.PrependError(fmt.Sprintf("%T write field end error 3:Crew: ", p), err)
	}
	return err
}

func (p *Ship) String() string {
	if p == nil {
		return "<nil>"
	}
	return fmt.Sprintf("Ship(%+v)", *p)
}
